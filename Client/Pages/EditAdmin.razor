@page "/edit-admin/{email}"
@using Core
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Edit Admin</PageTitle>
<AdminRestriction></AdminRestriction>
<h3>Edit Admin</h3>
<EditForm EditContext="@aEditContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-md-6 mb-3">
        <label for="Name">Name</label>
        <InputText id="Name" @bind-Value="admin.Name" class="form-control" />
    </div>
    <div class="col-md-3 mb-3">
        <label for="Email">Email</label>
        <InputText id="Email" @bind-Value="admin.Email" class="form-control" />
    </div>
    <div class="col-md-3 mb-3">
    <label for="role">Bruger rolle</label>
    <InputSelect id="role" @bind-Value="admin.Role" class="form-control">
        @if (loadedRole == "Administrator")
        {
            <option value="Administrator" selected>Administrator</option>
            <option value="Standard bruger">Standard bruger</option>
        }
        else
        {
            <option value="Standard bruger" selected>Standard bruger</option>
            <option value="Administrator">Administrator</option>
        }
    </InputSelect>
    </div>
    <div class="col-md-6 mb-3">
        <label for="PhoneNumber">Phone Number</label>
        <InputNumber id="PhoneNumber" @bind-Value="admin.PhoneNumber" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="KrævNumber">Kræv Number</label>
        <InputNumber id="KrævNumber" @bind-Value="admin.KrævNumber" class="form-control" />
    </div>
    <div class="col-md-6 mb-3">
        <label for="Password">Password</label>
        <InputText id="Password" @bind-Value="admin.Password" class="form-control" />
    </div>

    <div class="col-md-6 mb-3">
        <label for="Image">Image</label>
        <InputFile id="image" OnChange="HandleFileUpload" accept="image/jpeg" class="form-control" />
    </div>

    <div class="col-12 mb-3">
        <button type="submit" class="btn btn-success">Update Admin</button>
    </div>
</EditForm>
<button type="button" class="btn btn-danger" @onclick="DeleteAdmin">Delete Admin</button>

@code {
    [Parameter] public string email { get; set; }
    private Administrator admin = new();
    private string loadedRole;
    
    private EditContext aEditContext;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        aEditContext = new EditContext(admin);
        admin = await GetAdminByEmail(email) ?? new Administrator();
        loadedRole = admin.Role;
        aEditContext = new EditContext(admin);
    }

    public async Task<Administrator?> GetAdminByEmail(string email)
    {
        try
        {
            return await Http.GetFromJsonAsync<Administrator>($"https://localhost:7026/api/admin/get-by-email/{email}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching admin data: {ex.Message}";
            Console.WriteLine(errorMessage);
            return null;
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var imageString = Convert.ToBase64String(buffer);
        admin.Image = imageString; // Opdaterer billedet i admin objektet
    }

    public async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync($"https://localhost:7026/api/admin/update/{email}", admin);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/brugeroversigt");
            }
            else
            {
                errorMessage = $"Error updating admin: {response.ReasonPhrase}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating admin: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    public async Task DeleteAdmin()
    {
        var confirmDelete = await Confirm("Are you sure you want to delete this admin?");
        if (confirmDelete)
        {
            try
            {
                var response = await Http.DeleteAsync($"https://localhost:7026/api/admin/delete/{admin.Email}");
                if (response.IsSuccessStatusCode)
                {
                    NavigationManager.NavigateTo("/brugeroversigt");
                }
                else
                {
                    errorMessage = $"Error deleting admin: {response.ReasonPhrase}";
                    Console.WriteLine(errorMessage);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting admin: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
    }

    private async Task<bool> Confirm(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }
}
