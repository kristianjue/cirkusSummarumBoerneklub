@page "/eventoversigt"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Core
<AdminRestriction></AdminRestriction>
<PageTitle>System Settings Overview</PageTitle>

<h1 class="text-center">System Settings Overview</h1>

@if (cities == null)
{
    <p>Loading...</p>
}
else if (!cities.Any())
{
    <p>No events found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>By</th>
                <th>Åben for ansøgning</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td>@city.Name</td>
                    <td>@(city.OpenForRegistration ? "Ja" : "Nej")</td>
                    <td>
                        <a class="btn btn-primary" href="/specifikevent/@city.Name">Rediger</a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteCity(city.Name))">Slet</button> <!-- Tilføj slet-knappen -->
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<City> cities; // Tilføj en liste af City-objekter

    protected override async Task OnInitializedAsync() // meteode til at hente data fra databasen 
    {
        try
        {
            // Hent alle byer fra databasen via API
            cities = await Http.GetFromJsonAsync<List<City>>("https://localhost:7026/api/City/getall");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading system settings: {ex.Message}"); // Udskriv fejlbesked, hvis der opstår en fejl
        }
    }

    // Asynkron metode til at slette en by baseret på dens navn.
    private async Task DeleteCity(string cityName)
    {
        // Viser en bekræftelsesdialog i browseren og venter på brugerens svar.
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Er du sikker på, at du vil slette {cityName}?" });

        // Hvis brugeren bekræfter sletningen:
        if (confirm)
        {
            try
            {
                // Sender en DELETE-anmodning til API'et for at slette byen.
                var response = await Http.DeleteAsync($"https://localhost:7026/api/City/delete/{cityName}");

                // Tjekker om DELETE-anmodningen var succesfuld.
                if (response.IsSuccessStatusCode)
                {
                    // Fjerner byen fra listen over byer, hvis sletningen var succesfuld.
                    cities.RemoveAll(c => c.Name == cityName);
                    // Opdaterer UI'et for at afspejle ændringerne.
                    StateHasChanged();
                }
                else
                {
                    // Henter fejlmeddelelsen fra responsen og logger den, hvis sletningen fejlede.
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to delete city: {response.StatusCode} - {responseContent}");
                }
            }
            catch (Exception ex)
            {
                // Logger en fejlmeddelelse, hvis der opstår en undtagelse under sletningen.
                Console.WriteLine($"Error deleting city: {ex.Message}");
            }
        }
    }

}
