@page "/eventoversigt"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Core
<AdminRestriction></AdminRestriction>
<PageTitle>System Settings Overview</PageTitle>

<h1 class="text-center">System Settings Overview</h1>

@if (cities == null)
{
    <p>Loading...</p>
}
else if (!cities.Any())
{
    <p>No events found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>By</th>
                <th>Åben for ansøgning</th>
                <th>Uge</th>
                <th>Handlinger</th> <!-- Tilføj en kolonne til handlinger -->
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td>@city.Name</td>
                    <td>@(city.OpenForRegistration ? "Ja" : "Nej")</td>
                    <td>
                        <a class="btn btn-primary" href="/specifikevent/@city.Name">Rediger</a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(async () => await DeleteCity(city.Name))">Slet</button> <!-- Tilføj slet-knappen -->
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<City> cities;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cities = await Http.GetFromJsonAsync<List<City>>("https://localhost:7026/api/City/getall");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading system settings: {ex.Message}");
        }
    }

    private async Task DeleteCity(string cityName)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Er du sikker på, at du vil slette {cityName}?" });
        if (confirm)
        {
            try
            {
                var response = await Http.DeleteAsync($"https://localhost:7026/api/City/delete/{cityName}");
                if (response.IsSuccessStatusCode)
                {
                    cities.RemoveAll(c => c.Name == cityName);
                    StateHasChanged();
                }
                else
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Failed to delete city: {response.StatusCode} - {responseContent}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting city: {ex.Message}");
            }
        }
    }
}
