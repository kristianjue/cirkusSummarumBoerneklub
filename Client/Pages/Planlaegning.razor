@page "/planlaegning"
@using Core
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="admin-dashboard">
    <div class="row justify-content-end" style="margin-bottom: 20px">
        <div class="col-3">
            <h5><label for="city">Lokation</label></h5>
            <select name="city" class="form-select" @onchange="UpdateLocation">
                <option value="Aarhus">Aarhus</option>
                <option value="Ballerup">Ballerup</option>
            </select>
        </div>
    </div>
    <div class="top-sections">
        <div class="section">
            <h3>Applikationer</h3>
            @if (applications == null)
            {
                <p>Loading...</p>
            }
            else if (applications.Count == 0)
            {
                <p>No applications found.</p>
            }
            else
            {
                @foreach (var app in applications.Where(a => string.IsNullOrEmpty(a.Status) || a.Status == "Ny"))
                {
                    <div class="application">
                        @app.Id
                        <select @onchange="(e) => UpdateApplicationStatus(app, e.Value.ToString())" class="form-select">
                            <option value="">Vælg uge</option>
                            @foreach (var week in new[] { "Uge 27: Ons-Søn", "Uge 27: Ons-Fre", "Uge 27: Lør-Søn", "Uge 28: Ons-Søn", "Uge 28: Ons-Fre", "Uge 28: Lør-Søn", "Venteliste", "Afvist" })
                            {
                                <option value="@week">@week</option>
                            }
                        </select>
                    </div>
                }
            }
        </div>
        <div class="week-sections">
            @foreach (var week in new[] { "Uge 27", "Uge 28" })
            {
                <div class="section">
                    <h3>@week</h3>
                    <div class="sub-section">
                        <h4>Ons-Søn</h4>
                        @foreach (var app in applications.Where(a => a.Status == $"{week}: Ons-Søn"))
                        {
                            <div class="application">
                                @app.Id
                                <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Slet</button>
                            </div>
                        }
                    </div>
                    <div class="sub-section">
                        <h4>Ons-Fre</h4>
                        @foreach (var app in applications.Where(a => a.Status == $"{week}: Ons-Fre"))
                        {
                            <div class="application">
                                @app.Id
                                <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Slet</button>
                            </div>
                        }
                    </div>
                    <div class="sub-section">
                        <h4>Lør-Søn</h4>
                        @foreach (var app in applications.Where(a => a.Status == $"{week}: Lør-Søn"))
                        {
                            <div class="application">
                                @app.Id
                                <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Slet</button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="bottom-sections">
        <div class="section">
            <h3>Venteliste</h3>
            <div class="drop-zone">
                @foreach (var app in applications.Where(a => a.Status == "Venteliste"))
                {
                    <div class="application">
                        @app.Id
                        <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Slet</button>
                    </div>
                }
            </div>
        </div>

        <div class="section">
            <h3>Afvist</h3>
            <div class="drop-zone">
                @foreach (var app in applications.Where(a => a.Status == "Afvist"))
                {
                    <div class="application">
                        @app.Id
                        <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Slet</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row justify-content-end" style="margin-top: 20px">
        <div class="col-3">
            <button class="btn btn-primary" @onclick="SaveChanges">Gem</button>
        </div>
    </div>
</div>

@code {
    private List<Application> applications = new List<Application>();
    private string selectedLocation = "Aarhus";

    protected override async Task OnInitializedAsync()
    {
        await LoadApplications();
    }

    private async Task LoadApplications()
    {
        try
        {
            Console.WriteLine($"Loading applications for location: {selectedLocation}");
            applications = await Http.GetFromJsonAsync<List<Application>>("https://localhost:7026/api/application/getall");
            if (applications != null)
            {
                Console.WriteLine($"Total applications loaded: {applications.Count}");
                foreach (var app in applications)
                {
                    Console.WriteLine($"Application: Id={app.Id}, Status={app.Status}, Location={app.Location}");
                }

                applications = applications.Where(a => a.Location == selectedLocation).ToList();
                Console.WriteLine($"Filtered applications for {selectedLocation}: {applications.Count}");
                foreach (var app in applications)
                {
                    Console.WriteLine($"Filtered Application: Id={app.Id}, Status={app.Status}, Location={app.Location}");
                }
            }
            else
            {
                Console.WriteLine("No applications found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
        StateHasChanged();
    }

    private async Task UpdateLocation(ChangeEventArgs e)
    {
        selectedLocation = e.Value.ToString();
        Console.WriteLine($"Location updated to: {selectedLocation}");
        await LoadApplications();
    }

    private void UpdateApplicationStatus(Application app, string newStatus)
    {
        app.Status = newStatus;
        Console.WriteLine($"Application Id={app.Id} status updated to: {newStatus}");
        StateHasChanged();
    }

    private void RemoveApplication(Application app)
    {
        app.Status = ""; // Reset the status to remove from the current week and return to the application list
        Console.WriteLine($"Application Id={app.Id} status reset to empty");
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        foreach (var app in applications)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7026/api/application/update/{app.Id}", app);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error saving application {app.Id}: {response.ReasonPhrase}");
                }
                else
                {
                    Console.WriteLine($"Successfully saved application {app.Id}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception saving application {app.Id}: {ex.Message}");
            }
        }
        Navigation.NavigateTo("/planlaegning", forceLoad: true); // Reload the page to get fresh data
    }
}

<style>
    .admin-dashboard {
        display: flex;
        flex-direction: column;
    }

    .top-sections {
        display: flex;
        justify-content: space-around;
    }

    .week-sections {
        display: flex;
        justify-content: space-around;
        flex-grow: 1;
    }

    .bottom-sections {
        display: flex;
        justify-content: space-around;
    }

    .section, .sub-section {
        flex: 1;
        padding: 10px;
        min-width: 150px;
    }

    .drop-zone, .sub-section {
        border: 1px dashed gray;
        min-height: 150px;
        padding: 10px;
        background-color: #f9f9f9;
    }

    .application {
        padding: 5px;
        border: 1px solid lightgray;
        margin-bottom: 5px;
        background-color: white;
        cursor: default;
    }
</style>
