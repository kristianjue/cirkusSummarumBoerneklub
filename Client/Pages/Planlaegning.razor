@page "/planlaegning"
@using Core
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="admin-dashboard">
    <div class="row justify-content-end" style="margin-bottom: 20px">
        <div class="col-3">
            <h5><label for="city">Lokation</label></h5>
            <select name="city" class="form-select" @onchange="UpdateCity">
                @foreach (var city in cities)
                {
                    <option value="@city.Name">@city.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="top-sections">
        <div class="section">
            <h3>Applikationer</h3>
            @if (applications == null)
            {
                <p>Loading...</p>
            }
            else if (!applications.Any())
            {
                <p>No applications found.</p>
            }
            else
            {
                @foreach (var app in applications.Where(a => string.IsNullOrEmpty(a.Status) || a.Status == "Ny"))
                {
                    <div class="application">
                        @app.Volunteer.Name <br /> @app.Volunteer.Email <br /> @app.Priority1 + @app.Priority2 <br /> @app.Volunteer.Children.Count børn
                        <select @onchange="(e) => UpdateApplicationStatus(app, e.Value.ToString())" class="form-select">
                            <option value="">Vælg uge</option>
                            @foreach (var period in _filteredPeriods)
                            {
                                <option value="@period.PeriodName">@period.PeriodName</option>
                            }
                            <option value="Venteliste">Venteliste</option>
                            <option value="Afvist">Afvist</option>
                        </select>
                    </div>
                }
            }
        </div>
        <div class="week-sections">
            @foreach (var city in cities)
            {
                @foreach (var week in city.Weeks)
                {
                    <div class="section">
                        <h3 style="color:@GetWeekColor(week.WeekName)">Uge @week.WeekName (@GetChildrenCount($"uge {week.WeekName}") / 20)</h3>
                        <div class="sub-section">
                            <h4>Ons-Søn</h4>
                            @foreach (var app in applications.Where(a => a.Status == $"uge {week.WeekName}: Ons-Søn"))
                            {
                                <div class="application">
                                    @app.Volunteer.Name <br /> @app.Volunteer.Children.Count børn
                                    <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Fortryd</button>
                                </div>
                            }
                        </div>
                        <div class="sub-section">
                            <h4>Ons-Fre</h4>
                            @foreach (var app in applications.Where(a => a.Status == $"uge {week.WeekName}: Ons-Fre"))
                            {
                                <div class="application">
                                    @app.Volunteer.Name <br /> @app.Volunteer.Children.Count børn
                                    <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Fortryd</button>
                                </div>
                            }
                        </div>
                        <div class="sub-section">
                            <h4>Lør-Søn</h4>
                            @foreach (var app in applications.Where(a => a.Status == $"uge {week.WeekName}: Lør-Søn"))
                            {
                                <div class="application">
                                    @app.Volunteer.Name <br /> @app.Volunteer.Children.Count børn
                                    <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Fortryd</button>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <div class="bottom-sections">
        <div class="section">
            <h3>Venteliste</h3>
            <div class="drop-zone">
                @foreach (var app in applications.Where(a => a.Status == "Venteliste"))
                {
                    <div class="application">
                        @app.Volunteer.Name <br /> @app.Volunteer.Children.Count børn
                        <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Fortryd</button>
                    </div>
                }
            </div>
        </div>

        <div class="section">
            <h3>Afvist</h3>
            <div class="drop-zone">
                @foreach (var app in applications.Where(a => a.Status == "Afvist"))
                {
                    <div class="application">
                        @app.Volunteer.Name <br /> @app.Volunteer.Children.Count børn
                        <button class="btn btn-danger" @onclick="() => RemoveApplication(app)">Fortryd</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row justify-content-end" style="margin-top: 20px">
        <div class="col-3">
            <button class="btn btn-primary" @onclick="SaveChanges">Gem</button>
        </div>
    </div>
</div>

@code {
    private List<Application> applications = new List<Application>();
    private List<City> cities = new List<City>();
    private List<Period> _filteredPeriods = new List<Period>();
    private string selectedCity;

    protected override async Task OnInitializedAsync()
    {
        await LoadCities();
        await LoadApplications();
    }

    private async Task LoadCities()
    {
        cities = await Http.GetFromJsonAsync<List<City>>("https://localhost:7026/api/City/getall");
    }

    private async Task LoadApplications()
    {
        try
        {
            applications = await Http.GetFromJsonAsync<List<Application>>("https://localhost:7026/api/application/getall");
            FilterApplicationsByCity();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
    }

    private async Task UpdateCity(ChangeEventArgs e)
    {
        selectedCity = e.Value.ToString();
        var city = cities.FirstOrDefault(c => c.Name == selectedCity);
        if (city != null)
        {
            _filteredPeriods = city.Weeks.SelectMany(w => w.Periods).ToList();
        }
        await LoadApplications();
    }

    private void UpdateApplicationStatus(Application app, string newStatus)
    {
        app.Status = newStatus;
        StateHasChanged();
    }

    private void RemoveApplication(Application app)
    {
        app.Status = ""; // Reset the status to remove from the current week and return to the application list
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        foreach (var app in applications)
        {
            try
            {
                var response = await Http.PutAsJsonAsync($"https://localhost:7026/api/application/update/{app.Id}", app);
                if (!response.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Error saving application {app.Id}: {response.ReasonPhrase}");
                }
                else
                {
                    Console.WriteLine($"Successfully saved application {app.Id}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception saving application {app.Id}: {ex.Message}");
            }
        }
        Navigation.NavigateTo("/planlaegning", forceLoad: true); // Reload the page to get fresh data
    }

    private int GetChildrenCount(string week)
    {
        return applications.Where(a => a.Status.StartsWith(week)).Sum(a => a.Volunteer.Children.Count);
    }

    private string GetWeekColor(string weekName)
    {
        string week = $"uge {weekName}";
        int childrenCount = GetChildrenCount(week);
        if (childrenCount == 0)
        {
            return "black"; // No children assigned yet
        }
        if (childrenCount <= 10)
        {
            return "green"; // Safe range
        }
        if (childrenCount <= 19)
        {
            return "orange"; // Warning range
        }
        return "red"; // Full or over capacity
    }

    private string GetOptionStyle(string weekOption)
    {
        string week = weekOption.Split(':')[0]; // Extract week part (e.g., "Uge 27")
        return $"color: {GetWeekColor(week)};";
    }

    private void FilterApplicationsByCity()
    {
        applications = applications.Where(a => a.City.Name == selectedCity).ToList();

    }
}


<style>
    .admin-dashboard {
        display: flex;
        flex-direction: column;
    }

    .top-sections {
        display: flex;
        justify-content: space-around;
    }

    .week-sections {
        display: flex;
        justify-content: space-around;
        flex-grow: 1;
    }

    .bottom-sections {
        display: flex;
        justify-content: space-around;
    }

    .section, .sub-section {
        flex: 1;
        padding: 10px;
        min-width: 150px;
    }

    .drop-zone, .sub-section {
        border: 1px dashed gray;
        min-height: 150px;
        padding: 10px;
        background-color: #f9f9f9;
    }

    .application {
        padding: 5px;
        border: 1px solid lightgray;
        margin-bottom: 5px;
        background-color: white;
        cursor: default;
    }
</style>