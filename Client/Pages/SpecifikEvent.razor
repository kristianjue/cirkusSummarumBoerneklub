@page "/specifikevent"
@inject NavigationManager navigationManager
@inject HttpClient Http
@using Core
@using System.Text.Json

<PageTitle>Specifik Event</PageTitle>

<div style="text-align: center; margin-bottom: 50px">
    <h1>Specifik Event</h1>
    <p>Her kan du se detaljer for en specifik event.</p>
</div>

<!-- Din HTML kode her -->
@code {
    private EditContext aEditContext;
    private List<City> _cities; // Opdateret variabelnavn
    private List<Period> _filteredPeriods = new();
    private List<Period> _filteredSecondaryPeriods = new();

    Application _newTilmelding = new();

    protected override async Task OnInitializedAsync()
    {
        _newTilmelding.Volunteer = new Volunteer();
        _newTilmelding.Volunteer.Children = new List<Child>();
        aEditContext = new EditContext(_newTilmelding);

        await LoadSystemSettings();
    }

    private async Task LoadSystemSettings()
    {
        try
        {
            var systemSettingsList = await Http.GetFromJsonAsync<List<SystemSettings>>("https://localhost:7026/api/systemsettings/getall");
            if (systemSettingsList != null && systemSettingsList.Count > 0)
            {
                _cities = systemSettingsList.SelectMany(s => s.Cities).ToList();
                Console.WriteLine("SystemSettings loaded successfully.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching SystemSettings: {ex.Message}");
        }
    }

    private void OnLocationChanged(ChangeEventArgs e)
    {
        var selectedCity = e.Value.ToString();
        var city = _cities.FirstOrDefault(c => c.Name == selectedCity);
        if (city != null)
        {
            _filteredPeriods = city.Weeks.SelectMany(w => w.Periods).ToList();
            Console.WriteLine($"Location changed to: {selectedCity}. Filtered periods count: {_filteredPeriods.Count}");
        }
        else
        {
            _filteredPeriods.Clear();
        }
    }

    private void OnSecondaryLocationChanged(ChangeEventArgs e)
    {
        var selectedCity = e.Value.ToString();
        var city = _cities.FirstOrDefault(c => c.Name == selectedCity);
        if (city != null)
        {
            _filteredSecondaryPeriods = city.Weeks.SelectMany(w => w.Periods).ToList();
            Console.WriteLine($"Secondary location changed to: {selectedCity}. Filtered secondary periods count: {_filteredSecondaryPeriods.Count}");
        }
        else
        {
            _filteredSecondaryPeriods.Clear();
        }
    }

    public async Task HandleValidSubmit()
    {
        if (ekstraKid == false)
        {
            kid1.Signature = SignatureForKid1AsBase64;
            _newTilmelding.Volunteer.Children.Add(kid1);
        }
        else
        {
            kid1.Signature = SignatureForKid1AsBase64;
            kid2.Signature = SignatureForKid2AsBase64;
            _newTilmelding.Volunteer.Children.Add(kid1);
            _newTilmelding.Volunteer.Children.Add(kid2);
        }

        _newTilmelding.Id = System.Guid.NewGuid().ToString();
        _newTilmelding.Volunteer.Id = Guid.NewGuid().ToString();
        _newTilmelding.Status = "Ny";

        await Http.PostAsJsonAsync<Application>($"https://localhost:7026/api/application/create", _newTilmelding);

        navigationManager.NavigateTo($"brugeroversigt");
    }

    public Child kid1 = new Child();
    public Child kid2 = new Child();

    public bool ekstraKid = false;

    public void addKid()
    {
        ekstraKid = true;
    }

    public void removeKid()
    {
        ekstraKid = false;
    }

    public byte[] SignatureForKid1 { get; set; } = Array.Empty<byte>();
    public byte[] SignatureForKid2 { get; set; } = Array.Empty<byte>();

    public string SignatureForKid1AsBase64 => System.Text.Encoding.UTF8.GetString(SignatureForKid1);
    public string SignatureForKid2AsBase64 => System.Text.Encoding.UTF8.GetString(SignatureForKid2);
}
