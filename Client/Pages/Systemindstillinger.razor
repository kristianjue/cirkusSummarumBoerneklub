@page "/systemindstillinger"
@inject NavigationManager navigationManager
@inject HttpClient Http
@using Core
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Systemindstillinger</PageTitle>

<h1 class="text-center">Systemindstillinger</h1>

<EditForm EditContext="@aEditContext" class="container mt-4" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <h3 class="mb-4">Tilføj lokation</h3>
    <div class="form-check">
        <InputCheckbox id="openForRegistration" @bind-Value="_newSystemSet.OpenForRegistration" class="form-check-input" />
        <label class="form-check-label" for="openForRegistration">Åben for registration</label>
    </div>
    @foreach (Location location in _newSystemSet.Locations)
    {
        <div class="card mb-4">
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label for="city" class="form-label">By</label>
                        <InputText id="city" @bind-Value="location.City" class="form-control" />
                    </div>
                    <div class="col-md-6 text-end">
                        <button type="button" class="btn btn-danger mt-4" @onclick="() => RemoveLocation(location)">Fjern Lokation</button>
                    </div>
                </div>
                <h5 class="card-title">Perioder</h5>
                @foreach (Period period in location.Periods)
                {
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="periodName" class="form-label">Periode Navn</label>
                            <InputText id="periodName" @bind-Value="period.PeriodName" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label for="startDate" class="form-label">Start Dato</label>
                            <InputDate id="startDate" @bind-Value="period.StartDate" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label for="endDate" class="form-label">Slut Dato</label>
                            <InputDate id="endDate" @bind-Value="period.EndDate" class="form-control" />
                        </div>
                        <div class="col-md-3">
                            <label for="capacity" class="form-label">Kapacitet</label>
                            <InputNumber id="capacity" @bind-Value="period.Capacity" class="form-control" />
                        </div>
                        <div class="col-md-12 text-end">
                            <button type="button" class="btn btn-danger mt-2" @onclick="() => RemovePeriod(location, period)">Fjern Periode</button>
                        </div>
                    </div>
                }
                <div class="text-end">
                    <button type="button" class="btn btn-primary" @onclick="() => AddPeriod(location)">Tilføj Periode</button>
                </div>
            </div>
        </div>
    }

    <div class="text-center mb-4">
        <button type="button" class="btn btn-primary" @onclick="AddLocation">Tilføj Lokation</button>
    </div>

    <div class="text-center">
        <button type="submit" class="btn btn-success">Gem</button>
    </div>
</EditForm>

@code {
    private EditContext aEditContext;
    SystemSettings _newSystemSet = new SystemSettings { Locations = new List<Location>() };

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(_newSystemSet);
        _newSystemSet.Locations.Add(new Location { Periods = new List<Period> { new Period() } });
    }

    public async Task HandleValidSubmit()
    {
        // Ensure the Id is set before sending the request
        if (string.IsNullOrEmpty(_newSystemSet.Id))
        {
            _newSystemSet.Id = Guid.NewGuid().ToString();
        }

        // Log the data to the console for debugging
        Console.WriteLine("SystemSettings Data: " + System.Text.Json.JsonSerializer.Serialize(_newSystemSet));

        var response = await Http.PostAsJsonAsync("https://localhost:7026/api/systemsettings/create", _newSystemSet);
        if (response.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo("brugeroversigt");
        }
        else
        {
            // Handle error response
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to save system settings: {response.StatusCode} - {responseContent}");
        }
    }

    private void AddPeriod(Location location)
    {
        if (location.Periods == null)
        {
            location.Periods = new List<Period>();
        }
        location.Periods.Add(new Period());
    }

    private void RemovePeriod(Location location, Period period)
    {
        location.Periods.Remove(period);
    }

    private void AddLocation()
    {
        _newSystemSet.Locations.Add(new Location { Periods = new List<Period> { new Period() } });
    }

    private void RemoveLocation(Location location)
    {
        _newSystemSet.Locations.Remove(location);
    }
}
